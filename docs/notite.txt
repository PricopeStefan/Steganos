-E important la personal scramble sa fie encrypted informatia, altfel ne putem uita in primul sau al doilea block 8x8 si sa cautam o ordine a bytes-ilor care formeaza cei mai generali magic bytes(tipul unui fisier se regaseste in primii cativa bytes ai acestuia si putem determina permutarea folosita)
-stegoanaliza, ce este, de ce, cum
-Specificatie PNG = https://www.w3.org/TR/2003/REC-PNG-20031110/
-To write at JPG/JPEG
"The main issue with both the aforementioned formats(BMP and PNG) is the space a typical file occupies on disk. Both are lossless formats, meaning that all the pixels of the image are actually specified(not computed) and that absolutely no visual information is lost during transit. This is why the Joint Photographic Experts Group came up with a new image format called JPEG (#insert some history, dates, persons, RFC etc.) (based on the abbreviation of their group name). JPEG is a lossy format, meaning that some pixels are not actually written on the disk in order to save space while still trying to resemble the original picture as much as possible. Due to the fact that this format was invented when computers were really slow and because we live in a society where high speed and a great reduction in used memory are more important factors than a small, unnoticeable to the human eye, quality loss, JPEG became the most popular image format and is now being used everywhere on the internet, even 28 years after it was created."
-aparent steganos e numele unei metode steganografice, may be fun to mention it :)



pt build pe x86 pe windows:
-Command lineul de la Cross Tools COmmand prompt x86_x64(de la visual studio)
-comenzi:
	-   cmake -G "Visual Studio 16 2019" -A Win32 -S \path_to_source\ -B "build32"
	-   cmake --build build32 --config Release


LA MP3
-tagul ID3, loc unde se encodeaza metadatele, including album art, artist, song number etc.(good place for metadata steganography), nu e foarte complex dar e useless in rest
-frame header, chestii generice. formula pt calcul a lungimii audio data pt fiecare frame, chestiile de compresie(e cam insane)


===================================================
De adaugat la architecture:
X ce packageuri am (image, audio), ce contin fiecare(te legi de CMakeLists.txt pt build, cod sursa cpp pt module)
X flowchart cu ce se intampla din momentul cand rulezi steganos pana cand este generat fisierul de iesire(fie rezultat al encodingului fie al decodingului)
X testarea, cum e construit cu jenkins proiectu, cum e published pe github?


Detalii de implementare:
-macroul TRY facut de mine pt operatiile critice ce trebuiesc realizate garantat fara a esua, altfel ies cu exit codeul dat de error_codeul returnat
-cum fac citirea/scrierea din fisiere(fstreamuri opened in modu binary, copy paste cod?)
-functiile din namespaceul utils, setLSB, readByteFromLSBs, convert intre RGB si BGR, stuff like that?
-struct pack pt consecutive byte allocation and no padding added by default, otherwise messes values
-fisierele all.h folosite pt a include toate submodulele disponibile, more convenient


Benchmarks, cat de repede merge aplicatia pe diferite fisiere de test